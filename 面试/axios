【1】axios: 基于promise封装的ajax请求
【2】支持浏览器和node端使用
【3】支持请求拦截和响应拦截
【4】支持请求取消 【concelToken】
    创建取消请求、一个promise,
    let source =  CancelToken.source: 创建一个取消令牌
    axios({
        CancelToken: source.token // token  是个promise 是CancelToken 实例
    })
    source.cancel执行的时候会把this.reason 为Cancel的一个实例
    如果不调用source.cancel() 则CancelToken.source().token 不会有reason属性
    source.cancel()一执行 ->  token.reason = new Cancel() 【reason】属性就会有值 -> 就会resolvePromise() -> 然后就会promise.then里面 去abort
【5】批量请求 axios.all
【6】安全性更高，客户端支持防御 XSRF
    就是让你的每个请求都带一个从cookie中拿到的key, 根据浏览器同源策略，
    假冒的网站是拿不到你cookie中得key的
    这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，
    从而采取正确的策略。
xmlHttpRequest()
[1] onreadychangestate: 只要readyState 属性发生了变化就会调用次回调
【只要readyState】 
    0: 代理被创建, 但尚未调用open方法 【UNSENT】
    1: open 方法已经被调用  【OPENED】
    2: send方法已经被调用 【HEADERS_RECEIVED】
    3: 下载中 responseText 已经包含部分数据
    4: 下载操作已经完成 DONE
